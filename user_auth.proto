syntax = "proto3";

package UserAuth_v1;
import "annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// import "google/protobuf/timestamp.proto";
option go_package = "/user_auth;user_auth";

message user {
    string user_uuid = 1;
    string firebase_uid =2;
    string email = 3;
    string phone = 4;
    google.protobuf.Timestamp created_at =8;
    google.protobuf.Timestamp updated_at = 9;
}

message store{
    string store_uuid = 1;
    string store_name = 2;
    string gst_number = 3;
    address address = 4;
    bool is_active = 5;
    bool is_open = 6;

    google.protobuf.Timestamp created_at =8;
    google.protobuf.Timestamp updated_at = 9;
}

message address {
    string address_uuid = 1; 
    string address_line_1 = 2;
    string address_line_2 = 3;
    string landmark  = 4;
    string city = 5;         
    string state = 6;        
    string country = 7;      
    string pincode =  8;   
    google.protobuf.Timestamp created_at =10;
    google.protobuf.Timestamp updated_at = 11;   
}



service AuthService {
    // User authentication
    rpc CreateUser (CreateUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/auth/users"
            body: "*"
        };
    }

    rpc VerifyToken (VerifyTokenRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/auth/verify-token"
            body: "*"
        };
    }

    // Store operations
    rpc CreateStore (CreateStoreRequest) returns (StoreResponse) {
        option (google.api.http) = {
            post: "/v1/users/{user_uuid}/stores"
            body: "*"
        };
    }

    rpc UpdateStore (UpdateStoreRequest) returns (StoreResponse) {
        option (google.api.http) = {
            patch: "/v1/stores/{store_uuid}"
            body: "*"
        };
    }

    rpc GetStore (GetStoreRequest) returns (StoreResponse) {
        option (google.api.http) = {
            get: "/v1/stores/{store_uuid}"
        };
    }

    rpc GetAllStores (GetAllStoreRequest) returns (GetAllStoreResponse) {
        option (google.api.http) = {
            get: "/v1/users/{user_uuid}/stores"
        };
    }

    rpc DeleteStore (DeleteStoreRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/stores/{store_uuid}"
        };
    }

    // Address operations
    rpc CreateAddress (AddAddressRequest) returns (AddressResponse) {
        option (google.api.http) = {
            post: "/v1/stores/{store_uuid}/addresses"
            body: "*"
        };
    }

    rpc UpdateAddress (UpdateAddressRequest) returns (AddressResponse) {
        option (google.api.http) = {
            patch: "/v1/addresses/{address_uuid}"
            body: "*"
        };
    }

    rpc GetAddress (GetAddressRequest) returns (AddressResponse) {
        option (google.api.http) = {
            get: "/v1/addresses/{address_uuid}"
        };
    }

    rpc DeleteAddress (DeleteAddressRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/addresses/{address_uuid}"
        };
    }

    // Optional: create store with address in one call
    rpc CreateStoreWithAddress (CreateStoreWithAddressRequest) returns (StoreResponse) {
        option (google.api.http) = {
            post: "/v1/users/{user_uuid}/stores-with-address"
            body: "*"
        };
    }
    // Get a single user by UUID
    rpc GetUser (GetUserRequest) returns (user) {
        option (google.api.http) = {
            get: "/v1/users/{user_uuid}"
        };
    }

    // Update user details
    rpc UpdateUser (UpdateUserRequest) returns (user) {
        option (google.api.http) = {
            patch: "/v1/users/{user_uuid}"
            body: "*"
        };
    }

    // Delete a user
    rpc DeleteUser (DeleteUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/users/{user_uuid}"
        };
    }
}


message VerifyTokenRequest{
    string token = 1;
    string firebase_uid = 2; //Remove this later
}

message CreateUserRequest{
    string firebase_uid = 1;
    string token = 2;

}
message GetUserRequest {
    string user_uuid = 1;
}

message UpdateUserRequest {
    string user_uuid = 1;
    optional string email = 2;
    optional string email_verified = 3;
    // optionally allow updating password or preferences later
}

message DeleteUserRequest {
    string user_uuid = 1;
}

message CreateStoreRequest{
    string user_uuid = 1;
    string store_name = 2;
    string gst_number =3;
    bool is_active  = 4;
    bool is_open = 5;
    string discription = 6;
}

message StoreResponse{  
    string user_uuid = 1;
    store store = 2;
}

message UpdateStoreRequest{
    string user_uuid = 1;
    string store_uuid = 2;
    optional string store_name = 3;
    optional string gst_number =4;
    optional bool is_active  = 5;
    optional bool is_open = 6;
}

message AddAddressRequest{
    string user_uuid = 1;
    string store_uuid = 2;
    string address_1 = 3;
    string address_2 = 4;
    string landmark = 5;
    string  city = 6;
    string state = 7;
    string pincode = 8;
    string country = 9;
}

message UpdateAddressRequest{
    string store_uuid = 1;
    string address_uuid = 3;
    optional string address_1 = 4;
    optional string address_2 = 5;
    optional string landmark = 6;
    optional string  city = 7;
    optional string state = 8;
    optional string pincode = 9;
    optional string country = 10;
}
message GetStoreRequest{
    string user_uuid = 1;
    string store_uuid = 2;
}
message GetAllStoreRequest{
    string user_uuid = 1;
    string page = 2;
    string limit = 3;
}
message GetAllStoreResponse{
    repeated store stores = 1;
    int32 prev_page = 2;
    int32 next_page = 3;
}
message GetAddressRequest{
    string user_uuid = 1;
    string store_uuid = 2;
    string address_uuid = 3;
}
message DeleteStoreRequest{
    string user_uuid = 1;
    string store_uuid = 2;
}
message DeleteAddressRequest{
    string user_uuid = 1;
    string store_uuid = 2;
    string address_uuid = 3;
}

message AddressResponse{
    string store_uuid = 1;
    address address = 2;
}
message CreateStoreWithAddressRequest {
    string user_uuid = 1;
    string store_name = 2;
    string gst_number = 3;
    
    // nested address details
    string address_1 = 4;
    string address_2 = 5;
    string landmark = 6;
    string city = 7;
    string state = 8;
    string pincode = 9;
    string country = 10;
}

