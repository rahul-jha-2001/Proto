syntax = "proto3";

package UserAuth_v1;
import "annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";
// import "google/protobuf/timestamp.proto";
option go_package = "/user_auth;user_auth";

message User {
    string user_uuid = 1;
    string firebase_uid =2;
    string email = 3;
    string email_verified = 4;
    repeated store stores = 5;
}

message store{
    string store_uuid = 1;
    string Store_name = 2;
    string gst_number = 3;
    address address = 4;

}

message address {
    string address_uuid = 1; 
    string address_line_1 = 2;
    string address_line_2 = 3;
    string landmark  = 4;
    string city = 5;         
    string state = 6;        
    string country = 7;      
    string pincode =  8;      
}



service AuthService {
    // Store owner authentication
    rpc CreateUser (CreateUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/auth/storeuser/create_user"
            body: "*"
        };
    }

    rpc VerifyToken (VerifyTokenRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/auth/storeuser/verify_token"
            body: "*"
        };
    }
    
    rpc CreateStore (CreateStoreRequest) returns (StoreResponse){
        option (google.api.http) = {
            post: "/v1/storeuser/{user_uuid}/store"
            body: "*"
        };
    }
    rpc UpdateStore (UpdateStoreRequest) returns (StoreResponse){
        option (google.api.http) = {
            patch: "/v1/storeuser/{user_uuid}/store"
            body: "*"
        };
    }
    rpc GetStore (GetStoreRequest) returns (StoreResponse){
        option (google.api.http) = {
            get: "/v1/storeuser/{user_uuid}/store/{store_uuid}"
        };
    }
    rpc GetAllStores (GetAllStoreRequest) returns (GetAllStoreResponse){
        option (google.api.http) = {
            get: "/v1/storeuser/{user_uuid}/stores"
        };
    }

    rpc DeleteStore (DeleteStoreRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/v1/storeuser/{user_uuid}/store/{store_uuid}"
        };
    }

    rpc CreateAddress (AddAddressRequest) returns (AddressResponse){
        option (google.api.http) = {
            post: "/v1/store/{store_uuid}/address"
            body: "*"
        };
    }
    rpc UpdateAddress (UpdateAddressRequest) returns (AddressResponse){
        option (google.api.http) = {
            patch: "/v1/store/{store_uuid}/address"
            body: "*"
        };
    }
    rpc GetAddress (GetAddressRequest) returns (AddressResponse){
        option (google.api.http) = {
            get: "/v1/store/{store_uuid}/address/{address_uuid}"
        };
    }
    rpc DeleteAddress (DeleteAddressRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/v1/store/{store_uuid}/address/{address_uuid}"
        };
    }

}



message VerifyTokenRequest{
    string token = 1;
    string firebase_uid = 2;
}

message CreateUserRequest{
    string firebase_uid = 1;
    string token = 2;

}

message CreateStoreRequest{
    string user_uuid = 1;
    string store_name = 2;
}

message StoreResponse{  
    string user_uuid = 1;
    store store = 2;
}

message UpdateStoreRequest{
    string user_uuid = 1;
    string store_uuid = 2;
    optional string store_name = 3;
    optional string gst_number =5;
}

message AddAddressRequest{
    string user_uuid = 1;
    string store_uuid = 2;
    string address_1 = 3;
    string address_2 = 4;
    string landmark = 5;
    string  city = 6;
    string state = 7;
    string pincode = 8;
    string country = 9;
}

message UpdateAddressRequest{
    string store_uuid = 1;
    string address_uuid = 3;
    optional string address_1 = 4;
    optional string address_2 = 5;
    optional string landmark = 6;
    optional string  city = 7;
    optional string state = 8;
    optional string pincode = 9;
    optional string country = 10;
}
message GetStoreRequest{
    string user_uuid = 1;
    string store_uuid = 2;
}
message GetAllStoreRequest{
    string user_uuid = 1;
    string page = 2;
    string limit = 3;
}
message GetAllStoreResponse{
    repeated store stores = 1;
    string prev_page = 2;
    string next_page = 3;
}
message GetAddressRequest{
    string user_uuid = 1;
    string store_uuid = 2;
    string address_uuid = 3;
}
message DeleteStoreRequest{
    string user_uuid = 1;
    string store_uuid = 2;
}
message DeleteAddressRequest{
    string user_uuid = 1;
    string store_uuid = 2;
    string address_uuid = 3;
}

message AddressResponse{
    string store_uuid = 1;
    address address = 2;
}