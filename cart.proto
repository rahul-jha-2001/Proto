syntax = "proto3";

package Cart_v1;
option go_package = "/cart;cart";

import "annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

service CartService {
    //Core Cart Service

        rpc CreateTable(CreateTableRequest) returns (Table) {
            option (google.api.http) = {
                post: "/v1/store/{store_uuid}/tables"
                body: "*"
            };
        }
        rpc GetTable(GetTableRequest) returns (Table) {
            option (google.api.http) = {
                get: "/v1/store/{store_uuid}/tables/{table_uuid}"
            };
        }
        rpc ListTables(ListTablesRequest) returns (ListTablesResponse) {
            option (google.api.http) = {
                get: "/v1/store/{store_uuid}/tables"
            };
        }
        rpc UpdateTable(UpdateTableRequest) returns (Table) {
            option (google.api.http) = {
                patch: "/v1/store/{store_uuid}/tables/{table_uuid}"
                body: "*"
            };
        }
        rpc DeleteTable(DeleteTableRequest) returns (google.protobuf.Empty) {
            option (google.api.http) = {
                delete: "/v1/store/{store_uuid}/tables/{table_uuid}"
            };
        }
        rpc CreateServiceSession(CreateServiceSessionRequest) returns (ServiceSession) {
            option (google.api.http) = {
                post: "/v1/store/{store_uuid}/tables/{table_uuid}/sessions"
                body: "*"
            };
        }
        rpc GetServiceSession(GetServiceSessionRequest) returns (ServiceSession) {
            option (google.api.http) = {
                get: "/v1/store/{store_uuid}/sessions/{service_session_uuid}"
            };
        }

        rpc ListServiceSessions(ListServiceSessionsRequest) returns (ListServiceSessionsResponse) {
            option (google.api.http) = {
                get: "/v1/store/{store_uuid}/sessions"
            };
        }

        rpc GetActiveSession(GetActiveSessionByTableRequest) returns (GetActiveSessionByTableResponse){
            option (google.api.http) = {
                get: "/v1/store/{store_uuid}/table/{table_uuid}/session"
            };
        }


        rpc ValidateSession (ValidateSessionRequest) returns (ValidateSessionResponse){
            option (google.api.http) ={
                get: "/v1/store/{store_uuid}/sessions/{service_session_uuid}/validate"
            };
        }

        rpc CreateCart(CreateCartRequest) returns (CartResponse){
            option (google.api.http) = {
                post: "/v1/store/{store_uuid}/user/{user_phone_no}/cart"
                body: "*"
            };
        };

        rpc GetCart(GetCartRequest) returns (CartResponse){
            option (google.api.http) = {
                get: "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}"
                additional_bindings: {
                    get: "/v1/store/{store_uuid}/user/{user_phone_no}/cart"
                }
            };
        };
        rpc UpdateCart(UpdateCartRequest) returns  (CartResponse){
            option (google.api.http) ={
                patch: "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}"
                body: "*"
                additional_bindings: {
                    put: "/v1/store/{store_uuid}/user/{user_phone_no}/cart"
                    body: "*"
                }
            };
        };
        rpc DeleteCart(DeleteCartRequest) returns (google.protobuf.Empty){
            option (google.api.http) = {
                delete: "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}"
            additional_bindings: {
                delete: "/v1/store/{store_uuid}/user/{user_phone_no}/cart"
            }
            };
        };

            //Cart item Service
        rpc AddCartItem(AddCartItemRequest) returns (CartResponse){
            option (google.api.http) = {
                // For customer-side: JWT will contain user_phone_no
                post: "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/cartitem"
                body: "*"
            };
        };
        rpc RemoveCartItem(RemoveCartItemRequest) returns (CartResponse){
            option (google.api.http) = {
                delete: "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/cartitem"
            };
        };

        rpc AddQuantity(AddQuantityRequest) returns (CartResponse){
            option (google.api.http) = {
                // For customer-side: JWT will contain user_phone_no
                patch: "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/cartitem/{cart_item_uuid}/Add"
                body: "*"
              };
        };
        rpc RemoveQuantity(RemoveQuantityRequest) returns (CartResponse){
            option (google.api.http) = {
                // For customer-side: JWT will contain user_phone_no
                patch: "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/cartitem/{cart_item_uuid}/Remove"
            
            };
        };

        rpc CreateAddOn(CreateAddOnRequest) returns (CartResponse){
            option (google.api.http) = {
                post : "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/cartitem/{cart_item_uuid}/addon"
                body : "*"
            };
        };

        rpc RemoveAddOn(RemoveAddOnRequest) returns (CartResponse){
            option (google.api.http) = {
                delete : "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/cartitem/{cart_item_uuid}/addon/{add_on_uuid}"
            };
        };
        
        rpc IncreaseAddOnQuantity(IncreaseAddOnQuantityRequest) returns (CartResponse){
            option (google.api.http) = {
                patch : "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/cartitem/{cart_item_uuid}/addon/{add_on_uuid}/add_quantity"
            };
        };

        rpc RemoveAddOnQuantity(RemoveAddOnQuantityRequest) returns (CartResponse){
            option (google.api.http) = {
                patch : "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/cartitem/{cart_item_uuid}/addon/{add_on_uuid}/remove_quantity"
            };
        };

        rpc ValidateCoupon (ValidCouponResquest) returns (ValidCouponResponse){
            option (google.api.http) = {
                get: "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/validate_coupon/{coupon_code}"  // Changed from query param to path param
            };
        };
        
        rpc AddCoupon (AddCouponRequest) returns  (CartResponse){
            option (google.api.http) = {
                patch: "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/coupon/{coupon_code}"  // Changed from query param to path param
            };
        };

        rpc RemoveCoupon (RemoveCouponRequest) returns (CartResponse){
            option (google.api.http) = {
                delete : "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/removecoupon"   
            };
        };
        
        rpc ValidateCart (ValidateCartRequest) returns (CartResponse){
            option (google.api.http) = {
                get: "/v1/store/{store_uuid}/user/{user_phone_no}/cart/{cart_uuid}/validate"
            };
        }
        // Add generate Order once the order service is fixed
}
enum PAYMENTTYPE{
    PAYMENT_TYPE_UNSPECIFIED = 0;
    PAYMENT_TYPE_POSTPAID = 1;
    PAYMENT_TYPE_PREPAID = 2;
}

enum SERVICESESSIONSTATUS{
    SERVICE_SESSION_UNSPECIFIED = 0;
    SERVICE_SESSION_PENDING = 1;
    SERVICE_SESSION_ONGOING = 2;
    SERVICE_SESSION_ENDED = 3;
    SERVICE_SESSION_CANCELLED = 4;
}


enum ORDERTYPE {
    ORDER_TYPE_UNSPECIFIED = 0;
    ORDER_TYPE_DINE_IN = 1;
    ORDER_TYPE_TAKE_AWAY = 2;
    ORDER_TYPE_DRIVE_THRU = 3;
}

enum CARTSTATE {
    CART_STATE_UNSPECIFIED_STATE =0;
    CART_STATE_ACTIVE = 1;
    CART_STATE_LOCKED = 2;
    CART_STATE_ABANDONED = 3;
}

message Table{
    string table_uuid = 1;
    string store_uuid = 2;
    string table_number = 3;
    PAYMENTTYPE payment_type = 4;
    int32 no_of_sitting = 5;
    bool is_active = 6;
    string area_name = 7;
}

message ServiceSession {
    string service_session_uuid = 1;
    string table_uuid = 2;
    google.protobuf.Timestamp started_at = 3;
    google.protobuf.Timestamp ended_at = 4;
    SERVICESESSIONSTATUS service_status = 5;
    string phone_number = 6;
}

message Cart{

    string store_uuid = 1;
    string cart_uuid = 2;
    string user_phone_no = 3;
    ORDERTYPE order_type = 4;
    string table_no = 5;
    string vehicle_no = 6;
    string vehicle_description = 7;
    string coupon_code = 8;
    string special_instructions = 9;
    
    repeated CartItem items = 10;

    float sub_total = 11; //Sum of all the total amounts of a 
    float total_discount = 12;
    float total_price_before_tax = 13;
    float total_tax = 14;
    float packaging_cost = 15;
    float final_amount = 16;

    CARTSTATE cart_state = 17;

    string table_uuid = 20;
    string service_session_uuid = 21;

    google.protobuf.Timestamp created_at = 18;
    google.protobuf.Timestamp updated_at = 19;

    PAYMENTTYPE payment_type = 22; // Payment type for the cart, e.g., POSTPAID or PREPAID

}

message CartItem{

    string cart_item_uuid = 1;
    string cart_uuid = 2;
    string product_name =3;
    string product_uuid = 4;
    float tax_percentage = 5;

    float discount = 16;
    float unit_price = 6; //Price of a single unit of the item (before any discount or tax).
    int32 quantity  = 7; //Number of units of the item in the cart.
    float add_ons_total =8;
    float subtotal_amount = 9; //unit_price * quantity (total before discounts and tax).
    float discount_amount = 10; //Discount applied to this specific item.
    float price_before_tax  = 11; //(subtotal_amount - discount_amount).
    float tax_amount = 12; //Tax applied to the item.
    float final_price = 13; //price_before_tax + tax_amount (final amount for the item).
    
    float packaging_cost = 14; //Price for Packaging if required

    repeated AddOn add_ons =15;

}

message AddOn{
    string cart_item_uuid = 1;
    string add_on_name = 2;
    string add_on_uuid = 3;
    int32 quantity = 4;
    float unit_price = 5;
    bool is_free = 6;
    float subtotal_amount = 7;
}


message CreateTableRequest {
    string store_uuid   = 1;
    string table_number = 2;
    string area_name    = 3;
    PAYMENTTYPE payment_type = 4;
    int32  no_of_sitting     = 5;
    bool is_active = 6;
}

message GetTableRequest {
    string store_uuid = 1;
    string table_uuid = 2;
}

message ListTablesRequest {
    string store_uuid = 1;
}

message ListTablesResponse {
    repeated Table tables = 1;
}

message UpdateTableRequest {
    string store_uuid   = 1;
    string table_uuid   = 2;
    optional string area_name    = 3;
    optional PAYMENTTYPE payment_type = 4;
    optional int32  no_of_sitting     = 5;
    optional bool   is_active         = 6;
}

message DeleteTableRequest {
    string store_uuid = 1;
    string table_uuid = 2;
}

// -----------------------
// Request & Response Messages for ServiceSessionService
// -----------------------
message CreateServiceSessionRequest {
    string store_uuid  = 1;
    string table_uuid  = 2;
}

message GetServiceSessionRequest {
    string store_uuid           = 1;
    string service_session_uuid = 2;
}

message GetActiveSessionByTableRequest {
    string store_uuid = 1;
    string table_uuid = 2;
  }
  
message GetActiveSessionByTableResponse {
    ServiceSession service_session = 1;
  }

message ListServiceSessionsRequest {
    string store_uuid = 1; // Required: Store ID
    optional string table_uuid = 2; // Optional: Filter by table
    optional SERVICESESSIONSTATUS service_session_status = 3; // Optional: Filter by session status
    optional google.protobuf.Timestamp from_time = 4; // Optional: Filter sessions created after this timestamp
    optional int32 limit = 5; // Optional: Max results per page
    optional int32 page = 6; // Optional: Page number
}
  
message ListServiceSessionsResponse {
    repeated ServiceSession sessions = 1;
    int32 next_page = 2;
    int32 prev_page = 3;
}

message UpdateServiceSessionRequest {
    string store_uuid           = 1;
    string service_session_uuid = 2;
    optional SERVICESESSIONSTATUS service_status = 3;
    optional google.protobuf.Timestamp ended_at   = 4;
}

message ValidateSessionRequest {
    string store_uuid = 1;
    string service_session_uuid = 2;
}

message ValidateSessionResponse{
    bool  valid = 1;
    string message = 2;
    repeated string cart_uuids =3;
}

message CreateCartRequest {
    string store_uuid = 1; // required
    optional string user_phone_no = 2; // optional
    ORDERTYPE order_type = 3; // required
    optional string table_no = 4;
    optional string vehicle_no = 5;
    optional string vehicle_description = 6;
  }
  

message CartResponse{
    Cart cart = 1;
}

message GetCartRequest{

    string cart_uuid =1;

}

message UpdateCartRequest{
    string cart_uuid = 1;
    optional ORDERTYPE order_type = 4;
    optional string table_no = 5;
    optional string vehicle_no = 6;
    optional string vehicle_description = 7;
    optional string coupon_code = 8;
    optional string special_instructions = 9;
    optional string user_phone_no = 10; // Optional: User phone number for customer-side requests
}

message DeleteCartRequest{
    string cart_uuid = 1;
}

message  AddCartItemRequest{
    string cart_uuid = 1;
    string store_uuid = 2;
    string user_phone_no = 3;
    string product_uuid = 4;
}
message RemoveCartItemRequest{
    string cart_uuid = 1;
    string user_phone_no = 2;    
    string store_uuid = 3;
    string cart_item_uuid = 4;
    string product_uuid = 5;

}
message AddQuantityRequest{
    string cart_uuid = 1;
    string cart_item_uuid = 2;
    string product_uuid = 3;
    string store_uuid = 4;
    string user_phone_no = 5;
}
message RemoveQuantityRequest{
    string cart_uuid = 1;
    string cart_item_uuid = 2;
    string product_uuid = 3;
    string store_uuid = 4;
    string user_phone_no = 5;
}
message CreateAddOnRequest{
    string cart_uuid = 1;
    string cart_item_uuid =2;
    string add_on_uuid = 3;
    string store_uuid = 4;
    string user_phone_no = 5;
}
// message UpdateAddOnRequest{
//     string cart_uuid = 1;
//     string cart_item_uuid = 2;
//     string add_on_uuid = 3;
//     AddOn add_on = 4;
//     string store_uuid = 5;
//     string user_phone_no = 6;
// }
message RemoveAddOnRequest{
    string cart_uuid = 1;
    string cart_item_uuid = 2;
    string add_on_uuid = 3;
    string store_uuid = 4;
    string user_phone_no = 5;
}
message IncreaseAddOnQuantityRequest {
    string cart_uuid = 1;
    string cart_item_uuid = 2;
    string add_on_uuid = 3;
    string store_uuid = 4;
    string user_phone_no = 5;
}
message RemoveAddOnQuantityRequest {
    string cart_uuid = 1;
    string cart_item_uuid = 2;
    string add_on_uuid = 3;
    string store_uuid = 4;
    string user_phone_no = 5;
}
message ValidCouponResquest{
    string cart_uuid = 1;
    string coupon_code = 2;
    string store_uuid = 4;
    string user_phone_no = 5;
}
message ValidCouponResponse{
    bool valid = 1;
    string message = 2;
}
message AddCouponRequest{
    string cart_uuid = 1;
    string coupon_code = 2;
    string store_uuid = 4;
    string user_phone_no = 5;
}
message RemoveCouponRequest{
    string cart_uuid = 1;
    string store_uuid = 4;
    string user_phone_no = 5;
}

message ValidateCartRequest{
    string cart_uuid = 1;
    string store_uuid = 2;
    string user_phone_no = 3;
}

// message ValidateCartResponse{
//     Cart cart = 1;
// }

service CouponService{
    //COre Coupon service
    rpc CreateCoupon (CreateCouponRequest) returns (Coupon){
        option (google.api.http) = {
            post : "/v1/store/{store_uuid}/coupon"
            body : "*"
        };
    };
    rpc GetCoupon (GetCouponRequest) returns (Coupon){
        option (google.api.http) = {
            get : "/v1/store/{store_uuid}/coupon/{coupon_uuid}"
        };
    };
    rpc UpdateCoupon (UpdateCouponRequest) returns (Coupon){
        option (google.api.http) = {
            patch: "/v1/store/{store_uuid}/coupon/{coupon_uuid}"
            body: "*"
        };
    };
    rpc DeleteCoupon (DeleteCouponRequest) returns (google.protobuf.Empty){
        option (google.api.http) = {
            delete: "/v1/store/{store_uuid}/coupon/{coupon_uuid}"
        };
    };
    rpc listCoupon (listCouponRequest) returns (listCouponResponse){
        option (google.api.http) = {
            get : "/v1/store/{store_uuid}/coupon/list"
        };
    };
    rpc GetCouponUsage (GetCouponUsageRequest) returns (GetCouponUsageResponse){
        option (google.api.http) = {
            get: "/v1/store/{store_uuid}/coupon/{coupon_uuid}/couponusage"
        };
    };
}

enum DISCOUNTTYPE{
    DISCOUNT_TYPE_UNSPCIFIED = 0;
    DISCOUNT_TYPE_PERCENTAGE = 1;
    DISCOUNT_TYPE_FIXED = 2;
}

message Coupon{

    string coupon_uuid = 1;
    string store_uuid = 2;
    string coupon_code = 3;
    DISCOUNTTYPE discount_type = 4;
    
    google.protobuf.Timestamp valid_from = 5;
    google.protobuf.Timestamp valid_to = 6;

    int32 usage_limit_per_user = 7;
    int32 total_usage_limit = 8;

    float discount = 9;
    float min_spend = 10;
    bool is_for_new_users = 11;
    string description = 12;
    float max_cart_value = 13;
    bool is_active = 14;
    float max_discount = 15;

}

message CouponUsage{
    string usage_uuid = 1;
    string coupon_uuid = 2;
    string user_phone_no =3;
    google.protobuf.Timestamp used_at = 4;
    string order_uuid = 5;
    
}

message CreateCouponRequest{
    string store_uuid = 1;
    Coupon coupon = 2;
}
message GetCouponRequest{
    string store_uuid = 1;
    string coupon_uuid = 2;
    string coupon_code = 3;
}
message UpdateCouponRequest {
    string store_uuid = 1;
    string coupon_uuid = 2;
    string coupon_code = 3;
    DISCOUNTTYPE discount_type = 4;
    
    google.protobuf.Timestamp valid_from = 5;
    google.protobuf.Timestamp valid_to = 6;

    int32 usage_limit_per_user = 7;
    int32 total_usage_limit = 8;

    float discount = 9;
    float min_spend = 10;
    bool is_for_new_users = 11;
    string description = 12;
    float max_cart_value = 13;
    bool is_active = 14;
    float max_discount = 15;
}
message DeleteCouponRequest{
    string store_uuid = 1;
    string coupon_uuid = 2;
}
message listCouponRequest{
    string store_uuid = 1;
    int32 page = 2;
    int32 limit = 3;
}
message listCouponResponse{
    repeated Coupon coupons = 1;
    int32 next_page = 2;
    int32 prev_page = 3;
}
message GetCouponUsageRequest{
    string store_uuid = 1;
    string coupon_uuid = 2;
    int32 page = 3;
    int32 limit = 4;
}
message GetCouponUsageResponse{
    repeated CouponUsage coupon_usage_list = 1;
    int32 next_page = 2;
    int32 prev_page = 3;
}


